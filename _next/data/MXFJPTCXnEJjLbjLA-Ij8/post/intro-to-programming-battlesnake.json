{"pageProps":{"frontmatter":{"title":"Intro to programming: implementing a snake AI üêç","metaTitle":"Introduction to programming with snake AI","metaDesc":"An introduction to programming with the goal of implementing an AI that will compete in the developer game Battlesnake","metaImg":"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fblog.battlesnake.com%2Fcontent%2Fimages%2F2021%2F06%2FMediumSocial-1.png&f=1&nofb=1","date":"2022-02-16","tags":["wip","battlesnake","tutorial","beginner/novice","ai"]},"content":"\n[[toc]]\n\n## Introduction\n\nIn this post I'll walk you through concepts of programming and application\ndevelopment by example of an AI  that will play the game\n[Battlesnake](https://play.battlesnake.com/). The aim of this tutorial is to\nhelp you step beyond the 'programming a calculator' phase. You know what\nlanguage you want to learn, have a grasp of basic syntax and know how logic in\nprogramming works (e.g. if statements). But what now? Well, writing an AI :sunglasses:. We\nwill cover:\n\n- problem representation and solving (algorithms and data structures)\n- version control ([git](https://git-scm.com) and\n  [GitHub](https://www.github.com))\n- some high-level concepts regarding web services\n  ([APIs](https://en.wikipedia.org/wiki/API))\n- setting up a server with [Heroku](https://www.heroku.com)\n\n\nBattlesnake is a great place to start from. Firstly, because it touches upon a\nlot of different concepts in software development.  Secondly, your AI will\nbattle against that of other people and there are leaderboards to show you how\nwell it performs. This means that you can see your snake improve with your\nprogramming abilities!\n\nI can hear you ask: \"Great, but what language are we gonna be programming in?\".\nSince we are essentially  creating a [web\nservice](https://en.wikipedia.org/wiki/Web_service), you can do this in any\nlanguage you want!  The Battlesnake devs and the community have created some\n[starter projects](https://docs.battlesnake.com/references/starter-projects)\nwhich will help you get started in minutes. If you language is in there, great!\nOtherwise, don't worry.  I'll be explaining everything in [Go](https://go.dev/),\nbut the concepts are the same so you can follow along in any language.  I\nunderstand it might be confusing to understand what is language-specific and\nwhat isn't, so I'll make sure keep concepts and  implementation separate.\n\n### Prerequisites\n\nThe tutorial assumes that you are a beginner, but that you have some basic\nknowledge about programming.  More specifically, you\n\n- **have an environment** in which you can write and run code (i.e. an IDE)\n- **know how use logic** in you programming language of choice (e.g. if-statements)\n- know how to use any of: **classes/objects/structs** (if you language supports\n  those)\n- **have made a couple of small practice projects** (not necessary, but highly\n  recommended for fluency)\n\nIf some of these don't apply to you, I would highly encourage you to pick up a\nbasic course on [codecademy](https://www.codecademy.com/) or follow some\ntutorials on youtube. Create your first couple of little projects, and then come\nback! Do feel free to keep on looking, maybe you're a lot smarter than you (or\nI) think you are.\n\n### Structure\n\nWe will cover a wide range of topics, so I will try to keep the structure as\nconsistent and easy to follow as possible.  Like mentioned before, while I will\nbe using Go to illustrate examples, I will try to keep all language-dependent\nparts separate.\n\nFirst, I'll introduce the game, Battlesnake, rules and the different tools we'll\nneed.  Then we'll touch upon web services and APIs; how our application will\ncommunicate with the Battlesnake server.  Following that, I'll introduce\nsoftware to manage different versions of your code, and a platform to upload\nyour code to.  Finally, we will spin up a server which will use the code we've\nuploaded previously to run our snake on!\n\nYou are, of course, free to stop at any moment and resume at a later date.\nActually, I highly encourage this! Take breaks regularly, especially if things\ndon't seem to work when they should... :bug:. We'll cover a lot of material, so\nbuckle up, grab some snacks, and let's get going :rocket:!\n\n## Battlesnake\n\n[Battlesnake](https://play.battlesnake.com/) is a developer-oriented game,\nmeaning that everything in, about, and around the game is made by developers,\nfor developers. This means that there are a lot of resources out there that can\nhelp us out.  Best example is, of course, the original [Battlesnake\ndocumentation](https://docs.battlesnake.com/), which I encourage you to read and\nrefer to whenever you're lost before trying to _DuckDuckGo_ it.\n\n### How Battlesnake works\n\nThe Battlesnake game rules are simple. In the default game mode, the goal is to\nbe the last-snake-standing among a group of  three other snakes. Besides that,\nthe normal snake rules apply:\n\n1. don't run into walls\n2. don't run into snakes (you and others)\n3. eating food makes you grow :apple:\n\nThere are some other edge-cases to consider (e.g. what do you do when heads\ncollide), but these don't matter much for our purposes. Please refer to the\nofficial documentation if you want to learn more. \n\n### Creating our first snake\n\nEnough talking! Let's create a snake! To do this, we'll first need to create an\naccount. One option is to create an account with GitHub. Choose this one. Like\nmentioned before, we'll use this platform to host our code, so we need an\naccount for that anyway. [Create an account](https://github.com/signup) for\nGitHub, then head over to Battlesnake to [create an\naccount](https://play.battlesnake.com/login/) and select the **Sign in with\nGitHub** button.\n\nAwesome, now we can head over to Battlesnake to [create a new\nsnake](https://play.battlesnake.com/account/snakes/create/ ). Give it a name (I\nname my snakes after Lord of the Rings characters)! And... Huh? A URL? Yes, a\nURL. This is where the fun begins. For now we'll cancel, since the URL is a\nrequired field, but head to next section and I'll explain what's going on.\n\n### How Battlesnake _actually_ works\n\nThe reason why we need to provide a URL when creating a snake, is because the\nsnake is essentially a [web service](https://en.wikipedia.org/wiki/Web_service).\nI briefly mentioned this in the introduction, but now I'll elaborate on what\nthat actually means.\n\nTo put it concretely, our snake will run on its own remote computer (server),\nthe Battlesnake game server will send us the current state of the game (location\nof all the snake, food, size of the field, etc.) and ask us what our next move\nis.  We then send a response (indicated `{response}` in the diagram), this\nsimply contains the action: \"up\", \"down\", \"left\", or \"right\". But for the\nBattlesnake server to reach us we to tell it our location, the URL. If you would\nthis manually, this is the equivalent of typing the URL, let's say\n`my-awesome-snake.dev`, and appending `/move` to it, giving us\n`my-awesome-snake.dev/move`. This is what we call an\n[endpoint](https://en.wikipedia.org/wiki/Communication_endpoint). There is also\na endpoint for indicating that we want to start to game, which would be\n`my-awesome-snake.dev/start`. And one for ending the game, `/end`. You get the\nidea. \n\n![transaction\ndiagram](/images/post/intro-to-programming-battlesnake/transaction-diagram.svg\n\"Transaction diagram of the requests and responses made during a Battlesnake\ngame. Here to the endpoints `/start`, `/move`, and `/end`\")\n\nAs you can imagine, there is no real need to send any info back to the\nBattlesnake server when it send a web-request to our snake on `/end`, telling it\nto end the game. But we do definitely need to send a response when we've been\nasked to make a move. Just like we really need to receive some information about\nthe game, for example, what moves the others have made. The specification for\nwhat type of requests we need to handle (does the request contain information?\nDo we need to send anything back; give a response?), as well as the format that\nthe information is in (e.g. a two-dimensional array representing the board) is\ncalled an [Application Programming Interface, or\nAPI](https://en.wikipedia.org/wiki/API). \n\nHaving an API is great, because it means that **two programs can\ncommunicate, without them needing to know exactly how the other works**. Since\nthe only import thing is that they know what to expect when they ask the other\nsomething. Just as they know what to provide in order to make sure the other can\nsuccessfully perform their required task. This is exactly the reason why you\nshould be able to program in any language you want! **As long as you adhere to\nthe API specification, you can implement your snake in anything you want**.\n\nOf course, the Battlesnake documentation also [contains a specification for the\nAPI of the snake](https://docs.battlesnake.com/references/api). Go and see if\nyou can find the endpoints mentioned before.  There is actually one more\nendpoint I didn't mention, try to see if you can find it and figure out what it\ndoes! \n\n## Creating a basic snake\n\nAll right, this is where most of the work is gonna take place, so I'll just tell\nyou right now what to expect and how we're gonna do it. First, we'll take one of\nthe beginner projects that I've mentioned before. All of them are on GitHub, and\nwith just one button we can have our own version of such a so-called\n**template** to work with. Then, we'll make sure we have a local version of that\ncode. This is done with git, which I'll also introduce then (in short, it allows\nus to keep track of different versions of our code and lets us sync our local\nversion with a remote one, in our case GitHub). Once we've got that going, we\nwill look at Heroku. This is a service that will host our code on a publicly \naccessible URL, which will allow us to create our first snake! Once all of this\nis set up we will be able to start programming our snake logic. With that said,\nlet's get going!\n\n### Creating our first repository\n\nGoing back to the [starter\nprojects](https://docs.battlesnake.com/references/starter-projects), click on\nthe one that you would like to use. This should bring you to GitHub, where you\nwill click the big green button saying \n<kbd style=\"color: white; display:inline-block; background-color:darkgreen\">\n  Use this template\n</kbd>. Give it a name, keep it public, and click\n<kbd style=\"color: white; display:inline-block; background-color:darkgreen\">\n Create repository from template\n</kbd>. Congratulations! You have made your first repository  :partying_face:!\n\"But what is a repository?\", I can hear you ask. Well, let me explain. \n\nA repository is a folder in which [git]() tracks changes in order to organize\nthe history of your code. And what is git? Well, it simply is a tool to organize\nthe history, or, the different versions of you code, a [Version Control\nSystem, or VCS](). It allows you to **commit** changes in batches, and requires\nyou to title and describe each of these batches, or **commits**. Now, let's say\nyou would like to see if a particular feature would work well. You don't want to\naccidentally break your precious program, so you **branch** off to a different\nversion. In this new branch, you write your code and continue to make commits.\nYou are a great programmer, so your feature turns out to be a great addition to\nthe existing program! Now you can **merge** the new feature branch with the\n**main** (from which we've originally branched off) one. Congratulations, you're\na _git master_.\n\n"},"__N_SSG":true}